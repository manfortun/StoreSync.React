// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreSync.React.Server.DataAccess;

#nullable disable

namespace StoreSync.React.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240507041150_ChangeFK")]
    partial class ChangeFK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StoreSync.React.Server.Models.Debt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebtorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DebtorName");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.DebtPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebtId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DebtorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Payment")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.HasIndex("DebtorName");

                    b.ToTable("DebtsPayment");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Debtor", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Debtors");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Price", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id", "DateCreated");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Purchase", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SaleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SaleId");

                    b.HasIndex("SaleId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Sale", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebtId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Debt", b =>
                {
                    b.HasOne("StoreSync.React.Server.Models.Debtor", "Debtor")
                        .WithMany("Debts")
                        .HasForeignKey("DebtorName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debtor");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.DebtPayment", b =>
                {
                    b.HasOne("StoreSync.React.Server.Models.Debt", null)
                        .WithMany("Payments")
                        .HasForeignKey("DebtId");

                    b.HasOne("StoreSync.React.Server.Models.Debtor", "Debtor")
                        .WithMany("Payments")
                        .HasForeignKey("DebtorName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debtor");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Price", b =>
                {
                    b.HasOne("StoreSync.React.Server.Models.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Purchase", b =>
                {
                    b.HasOne("StoreSync.React.Server.Models.Product", "Product")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreSync.React.Server.Models.Sale", "Sale")
                        .WithMany("Purchases")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Sale", b =>
                {
                    b.HasOne("StoreSync.React.Server.Models.Debt", "Debt")
                        .WithMany("Sales")
                        .HasForeignKey("DebtId");

                    b.Navigation("Debt");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Debt", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Debtor", b =>
                {
                    b.Navigation("Debts");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Product", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("StoreSync.React.Server.Models.Sale", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
